Project Title:  Smart recruiter 

✅ Objective:
Build a full-stack web app that automates resume screening and interview scheduling for HR teams using the Gemini API. It should include a modern Material Design UI, candidate dashboard, and admin interface.

⚙️ Tech Stack:
• Frontend: React with Material‑UI (MUI), responsive layout  
• Backend: Node.js with Express or Python Flask (you choose)  
• Database: PostgreSQL or SQLite for local dev  
• AI Integration: Google Gemini API via HTTP  
• Resume parsing library: PyMuPDF or python-docx  
• Calendar API: Google Calendar or Calendly  
• Email: NodeMailer or SendGrid

📁 Frontend Requirements:
• Landing page for candidates → upload resume and select a job role  
• Candidate flow: confirmation of successful submission  
• Admin dashboard: list parsed resumes with match scores (0–100), strengths/gaps  
• Shortlist view: buttons to “invite” or “reject” candidate; show Gemini‑generated interview questions and resume summary

🧩 Backend Flow Logic:
1. Receive uploaded CV (PDF/DOCX), extract text and metadata  
2. Receive job description input from recruiter (text or file)  
3. For each resume: compose prompt combining JD + parsed resume → send to Gemini API  
   - Expected Gemini response: match score, list of strengths, missing skills/risks  
4. Store results in database with timestamp and candidate data  
5. If score ≥ 70%, auto‑schedule an interview via Calendar API and send email  
   - Invite email should include summary and generated interview questions  
6. If score < threshold, send polite rejection email  
7. Provide endpoints for admin CRUD operations, candidate download, and viewing analytics

🚀 UI Details:
• Use Material‑UI components (AppBar, DataGrid, Cards, Dialogs)  
• Dark/light mode toggle  
• File upload progress bar  
• Snackbar notifications for upload/upload errors

⌛ Workflow Example:
Candidate uploads CV for “Software Engineer – Python + NLP.”  
Resume is parsed → prompt created → Gemini returns score 88, strengths [“Python, NLP experience”], gap [“no spaCy mention”]. Stored in DB.  
Score ≥ 70 → system auto‑sends interview invite e‑mail with a Google Meet link and question set generated by Gemini.  
Admin dashboard shows candidate card with score, summary, "Invite" status, and suggested questions.

🛠️ Implementation Steps:
• Scaffold project with Replit Agent  
• Create backend endpoints: `/upload`, `/jobs`, `/match`, `/schedule`, `/send-email`  
• Frontend: build forms for JD input, candidate upload, admin dashboard  
• Write Gemini prompt template with placeholders for JD + resume  
• Add scheduling/email logic with environment variables API_KEY, CALENDAR_CREDENTIALS  
• Use checkpoints after major steps: resume parsing, AI match, email scheduling

📌 Instructions for Agent:
1. Scaffold frontend + backend with the described tech stack  
2. Ensure modern design via Material-UI  
3. Use proper separation: API routes vs frontend views  
4. Save each significant milestone as checkpoint  
5. Include comments in code explaining key flows (e.g. prompt format, score interpretation)  
6. Prompt Gemini with correct template and parse JSON or structured output  
7. Provide test dummy JD and sample resume for initial scaffolding  
8. Build and launch a working demo in Replit with placeholders for API keys

---

Let me know if you would like the Agent to begin with a **resumé parser + backend API setup**, or to **generate the full React/MUI admin dashboard first**. We can iterate feature‑by‑feature as Replit Agent suggests next steps. 🚀

i am also sharing gemini key : AIzaSyBX4ymp0-oBgrqX_U58yUUmz31evZBoe60